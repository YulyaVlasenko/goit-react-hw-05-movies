{"version":3,"file":"static/js/242.1c90f968.chunk.js","mappings":"iNAEaA,EAAQC,EAAAA,GAAAA,GAAH,oE,SCCLC,EAAoB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClC,OACE,+BACE,SAAC,EAAD,UAAUA,KAGf,ECPYC,EAAOH,EAAAA,GAAAA,GAAH,wHCGJI,EAAgB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACxBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,EAAD,UACGF,EAAKG,KAAI,gBAAGC,EAAH,EAAGA,GAAIP,EAAP,EAAOA,MAAP,OACR,yBACE,SAAC,KAAD,CAAMQ,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMN,GAA1C,UACE,SAACL,EAAD,CAAmBC,MAAOA,OAFrBO,EADD,KASf,C,kFCjBYI,EAAUb,EAAAA,GAAAA,QAAH,iDAIPc,EAAYd,EAAAA,GAAAA,IAAH,uEAKTe,EAAef,EAAAA,GAAAA,GAAH,0F,SCRZa,EAAU,SAAC,GAAD,IAAGX,EAAH,EAAGA,MAAOc,EAAV,EAAUA,SAAV,OACrB,SAAC,EAAD,WACE,UAAC,EAAD,WACGd,IAAS,SAAC,EAAD,UAAiBA,IAC1Bc,MAJgB,C,yICDVC,EAAOjB,EAAAA,GAAAA,KAAH,iQAcJkB,EAAQlB,EAAAA,GAAAA,MAAH,sO,kBCXH,SAASmB,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAgBA,OACE,UAAC,EAAD,CAAQH,SAbW,SAAAI,GACnBA,EAAIC,iBAEiB,KAAjBH,EAAMI,QAKVN,EAASE,EAAMI,QACfH,EAAS,KALPI,EAAAA,OAAAA,QAAe,wBAMlB,EAGC,WACE,SAAC,EAAD,CAASC,KAAK,OAAON,MAAOA,EAAOO,SAhBlB,SAAAL,GAAG,OAAID,EAASC,EAAIM,cAAcR,MAA/B,KAkBpB,mBAAQM,KAAK,SAAS,aAAW,SAAjC,SAA0C,aAK/C,C,sBC7BDG,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,I,SCoDA,EA/Ce,WACb,OAAoCV,EAAAA,EAAAA,UAAS,IAA7C,eAAOW,EAAP,KAAmBC,EAAnB,KACA,GAAsDZ,EAAAA,EAAAA,UAAS,GAA/D,eAAOa,EAAP,KAA4BC,EAA5B,KACA,GAAkCd,EAAAA,EAAAA,WAAS,GAA3C,eAAOe,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,eAEpCC,EAAAA,EAAAA,YAAU,WACHF,IAGLJ,GAAa,GDdW,SAAAI,GAC1B,OAAOV,EAAAA,EAAAA,GAAM,eAAgB,CAC3Ba,OAAQ,CACNC,QALU,mCAMVC,MAAOL,IAGZ,CCSGM,CAAaN,GACVO,MAAK,YAA4B,IAAjBC,EAAgB,EAAxB5C,KAAQ4C,QACfhB,GAAc,OAAIgB,IAClBd,EAAuBc,EAAQC,QAE1BD,EAAQC,QACXvB,EAAAA,OAAAA,QACE,yDAGL,IACAwB,OAAM,SAAAC,GACLC,QAAQC,IAAI,QAASF,EACtB,IACAG,SAAQ,WACPlB,GAAa,GACbmB,EAAAA,QAAAA,QACD,IACJ,GAAE,CAACf,IAMJ,OACE,+BACE,UAAC5B,EAAA,EAAD,WACGuB,GAAaoB,EAAAA,QAAAA,UACd,SAACrC,EAAD,CAAWC,SARI,SAAAqB,GACnBD,EAAgB,CAAEC,WAAYA,GAC/B,IAOMP,EAAsB,IAAK,SAAC9B,EAAA,EAAD,CAAeC,KAAM2B,QAIxD,C","sources":["components/MoviesGalleryItem/MoviesGalleryItem.styled.js","components/MoviesGalleryItem/MoviesGalleryItem.jsx","components/MoviesGallery/MoviesGallery.styled.js","components/MoviesGallery/MoviesGallery.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.jsx","api/searchMovies.js","pages/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Title = styled.h3`\n  font-size: 18px;\n  font-weight: normal;\n`;\n","import * as s from './MoviesGalleryItem.styled';\nimport PropTypes from 'prop-types';\n\nexport const MoviesGalleryItem = ({ title }) => {\n  return (\n    <>\n      <s.Title>{title}</s.Title>\n    </>\n  );\n};\n\nMoviesGalleryItem.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-left: 20px;\n  li {\n    &:not(:last-child) {\n      margin-bottom: 10px;\n    }\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { MoviesGalleryItem } from '../MoviesGalleryItem/MoviesGalleryItem';\nimport * as s from './MoviesGallery.styled';\nimport PropTypes from 'prop-types';\n\nexport const MoviesGallery = ({ data }) => {\n  const location = useLocation();\n\n  return (\n    <s.List>\n      {data.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <MoviesGalleryItem title={title} />\n          </Link>\n        </li>\n      ))}\n    </s.List>\n  );\n};\n\nMoviesGallery.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding-bottom: 50px;\n`;\n\nexport const Container = styled.div`\n  padding-left: 20px;\n  padding-right: 20px;\n`;\n\nexport const SectionTitle = styled.h2`\n  font-size: 32px;\n  padding-top: 25px;\n  margin-bottom: 25px;\n`;\n","import * as s from './Section.styled';\nimport PropTypes from 'prop-types';\n\nexport const Section = ({ title, children }) => (\n  <s.Section>\n    <s.Container>\n      {title && <s.SectionTitle>{title}</s.SectionTitle>}\n      {children}\n    </s.Container>\n  </s.Section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.any.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  padding-top: 20px;\n  margin-bottom: 20px;\n  button {\n    padding: 1px 4px;\n    border: 1px solid rgb(195 192 192);\n    cursor: pointer;\n    &:active {\n      background-color: rgb(195 192 192);\n    }\n  }\n`;\n\nexport const Input = styled.input`\n  width: 400px;\n  padding: 4px;\n  border: 1px solid rgb(219, 216, 216);\n  &:focus {\n    border-color: rgb(99, 149, 241, 0.6);\n    outline: 2px rgba(99, 149, 241, 0.6);\n    outline-style: solid;\n  }\n`;\n","import { useState } from 'react';\nimport * as s from './Searchbar.styled';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport PropTypes from 'prop-types';\n\nexport default function Searchbar({ onSubmit }) {\n  const [value, setValue] = useState('');\n\n  const handleChange = evt => setValue(evt.currentTarget.value);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (value.trim() === '') {\n      Notify.failure('Enter text to search!');\n      return;\n    }\n\n    onSubmit(value.trim());\n    setValue('');\n  };\n\n  return (\n    <s.Form onSubmit={handleSubmit}>\n      <s.Input type=\"text\" value={value} onChange={handleChange} />\n\n      <button type=\"submit\" aria-label=\"Search\">\n        Search\n      </button>\n    </s.Form>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '0b46dbc328ca74a0ee97be896e4cf159';\n\nexport const searchMovies = searchText => {\n  return axios('search/movie', {\n    params: {\n      api_key: API_KEY,\n      query: searchText,\n    },\n  });\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Section } from 'components/Section/Section';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport { MoviesGallery } from 'components/MoviesGallery/MoviesGallery';\nimport { searchMovies } from 'api/searchMovies';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst Movies = () => {\n  const [dataMovies, setDataMovies] = useState([]);\n  const [searchMoviesPerPage, setSearchMoviesPerPage] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchText = searchParams.get('searchText');\n\n  useEffect(() => {\n    if (!searchText) {\n      return;\n    }\n    setIsLoading(true);\n\n    searchMovies(searchText)\n      .then(({ data: { results } }) => {\n        setDataMovies([...results]);\n        setSearchMoviesPerPage(results.length);\n\n        if (!results.length) {\n          Notify.failure(\n            'Sorry, there are no movies matching your search query.'\n          );\n        }\n      })\n      .catch(err => {\n        console.log('ERROR', err);\n      })\n      .finally(() => {\n        setIsLoading(false);\n        Loading.remove();\n      });\n  }, [searchText]);\n\n  const handleSearch = searchText => {\n    setSearchParams({ searchText: searchText });\n  };\n\n  return (\n    <>\n      <Section>\n        {isLoading && Loading.arrows()}\n        <Searchbar onSubmit={handleSearch} />\n        {searchMoviesPerPage > 0 && <MoviesGallery data={dataMovies} />}\n      </Section>\n    </>\n  );\n};\nexport default Movies;\n"],"names":["Title","styled","MoviesGalleryItem","title","List","MoviesGallery","data","location","useLocation","map","id","to","state","from","Section","Container","SectionTitle","children","Form","Input","Searchbar","onSubmit","useState","value","setValue","evt","preventDefault","trim","Notify","type","onChange","currentTarget","axios","dataMovies","setDataMovies","searchMoviesPerPage","setSearchMoviesPerPage","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","searchText","get","useEffect","params","api_key","query","searchMovies","then","results","length","catch","err","console","log","finally","Loading"],"sourceRoot":""}