{"version":3,"file":"static/js/155.5dba6cf3.chunk.js","mappings":"2NAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,I,mCCFaC,EAAOC,EAAAA,GAAAA,GAAH,8IAUJC,EAAQD,EAAAA,GAAAA,IAAH,iEAKLE,EAAOF,EAAAA,GAAAA,EAAH,gDAIJG,EAASH,EAAAA,GAAAA,EAAH,8C,kBC8CnB,EA5Da,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,GAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACHT,IAGLQ,GAAa,GFXW,SAAAR,GAC1B,OAAON,EAAAA,EAAAA,GAAM,SAAD,OAAUM,EAAV,YAA6B,CACvCU,OAAQ,CACNC,QALU,qCAQf,CEOGC,CAAaZ,GACVa,MAAK,SAAAC,GACJV,EAAYU,EAAKA,KAAKC,MACtBT,EAAeQ,EAAKA,KAAKC,KAAKC,OAC/B,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAI,QAASF,EACtB,IACAG,SAAQ,WACPb,GAAa,GACbc,EAAAA,QAAAA,QACD,IACJ,GAAE,CAACtB,KAGF,gCACGO,GAAae,EAAAA,QAAAA,UACZf,IACA,2BACGF,EAAc,IACb,SAAC,EAAD,UACGF,EAASoB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,KAAhC,OACZ,2BACE,SAAC,EAAD,UACGD,GACC,gBACEE,QAAQ,OACRC,IAAG,0CAAqCH,GACxCI,IAAKH,KAGP,gBAAKE,IAAKE,EAAaD,IAAKH,MAG/BA,IAAQ,SAAC,EAAD,UAASA,IACjBF,IAAa,yBAAG,cAAYA,OAbtBD,EADG,MAmBD,IAAhBnB,IACC,SAAC,EAAD,UAAU,8CAMrB,C","sources":["api/getMovieCast.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '94c09d16448ecd6ad30fce2c9e06557d';\n\nexport const getMovieCast = movieId => {\n  return axios(`movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-left: 40px;\n  padding-top: 20px;\n  li {\n    &:not(:last-child) {\n      margin-bottom: 20px;\n    }\n  }\n`;\n\nexport const Thumb = styled.div`\n  width: 100px;\n  margin-bottom: 20px;\n`;\n\nexport const Name = styled.p`\n  margin-bottom: 20px;\n`;\n\nexport const NoCast = styled.p`\n  padding-top: 20px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'api/getMovieCast';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport * as s from './Cast.styled';\nimport noImageIcon from '../icons/noImageIcon.jpg';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [dataCast, setDataCast] = useState([]);\n  const [castPerPage, setCastPerPage] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    setIsLoading(true);\n\n    getMovieCast(movieId)\n      .then(data => {\n        setDataCast(data.data.cast);\n        setCastPerPage(data.data.cast.length);\n      })\n      .catch(err => {\n        console.log('ERROR', err);\n      })\n      .finally(() => {\n        setIsLoading(false);\n        Loading.remove();\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && Loading.arrows()}\n      {!isLoading && (\n        <div>\n          {castPerPage > 0 && (\n            <s.List>\n              {dataCast.map(({ id, character, profile_path, name }) => (\n                <li key={id}>\n                  <s.Thumb>\n                    {profile_path ? (\n                      <img\n                        loading=\"lazy\"\n                        src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                        alt={name}\n                      />\n                    ) : (\n                      <img src={noImageIcon} alt={name} />\n                    )}\n                  </s.Thumb>\n                  {name && <s.Name>{name}</s.Name>}\n                  {character && <p>Character: {character}</p>}\n                </li>\n              ))}\n            </s.List>\n          )}\n          {castPerPage === 0 && (\n            <s.NoCast>We don't have a cast for this movie.</s.NoCast>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\nexport default Cast;\n"],"names":["axios","List","styled","Thumb","Name","NoCast","movieId","useParams","useState","dataCast","setDataCast","castPerPage","setCastPerPage","isLoading","setIsLoading","useEffect","params","api_key","getMovieCast","then","data","cast","length","catch","err","console","log","finally","Loading","map","id","character","profile_path","name","loading","src","alt","noImageIcon"],"sourceRoot":""}